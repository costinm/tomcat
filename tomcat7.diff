Index: java/org/apache/coyote/http11/Http11Protocol.java
===================================================================
--- java/org/apache/coyote/http11/Http11Protocol.java	(revision 1304962)
+++ java/org/apache/coyote/http11/Http11Protocol.java	(working copy)
@@ -25,9 +25,11 @@
 import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.JIoEndpoint;
 import org.apache.tomcat.util.net.JIoEndpoint.Handler;
 import org.apache.tomcat.util.net.SSLImplementation;
+import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 
@@ -90,6 +92,14 @@
         }
     }
     
+    @Override
+    public void start() throws Exception {
+        super.start();
+        if (npnHandler != null) {
+            npnHandler.init(endpoint, 0, adapter);
+        }
+    }
+
     // ----------------------------------------------------- JMX related methods
 
     @Override
@@ -124,6 +134,17 @@
             return proto.sslImplementation;
         }
 
+        public SocketState process(SocketWrapper<Socket> socket,
+                SocketStatus status) {
+            if (proto.npnHandler != null) {
+                SocketState ss = proto.npnHandler.process(socket, status);
+                if (ss != SocketState.OPEN) {
+                    return ss;
+                }
+            }
+            return super.process(socket, status);
+        }
+        
         /**
          * Expected to be used by the handler once the processor is no longer
          * required.
@@ -191,5 +212,12 @@
                 throws IOException {
             return new UpgradeBioProcessor(socket, inbound);
         }
+
+        @Override
+        public void beforeHandshake(SocketWrapper<Socket> socket) {
+            if (proto.npnHandler != null) {
+                proto.npnHandler.onCreateEngine(socket);
+            }
+        }
     }
 }
Index: java/org/apache/coyote/http11/Http11AprProtocol.java
===================================================================
--- java/org/apache/coyote/http11/Http11AprProtocol.java	(revision 1304962)
+++ java/org/apache/coyote/http11/Http11AprProtocol.java	(working copy)
@@ -25,8 +25,10 @@
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint.Handler;
+import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 
@@ -179,6 +181,15 @@
     }
 
 
+    @Override
+    public void start() throws Exception {
+        super.start();
+        if (npnHandler != null) {
+            long sslCtx = ((AprEndpoint) endpoint).getJniSslContext();
+            npnHandler.init(endpoint, sslCtx, adapter);
+        }
+    }
+
     // --------------------  Connection handler --------------------
 
     protected static class Http11ConnectionHandler
@@ -227,6 +238,28 @@
         }
 
         @Override
+        public SocketState process(SocketWrapper<Long> socket,
+                SocketStatus status) {
+            if (proto.npnHandler != null) {
+                Processor<Long> processor = null;
+                if (status == SocketStatus.OPEN) {
+                    processor = connections.get(socket.getSocket());
+
+                }
+                if (processor == null) {
+                    // if not null - this is a former comet request, handled by http11
+                    SocketState socketState = proto.npnHandler.process(socket, status);
+                    // handled by npn protocol.
+                    if (socketState == SocketState.CLOSED ||
+                            socketState == SocketState.LONG) {
+                        return socketState;
+                    }
+                }
+            }
+            return super.process(socket, status);
+        }
+
+        @Override
         protected void initSsl(SocketWrapper<Long> socket,
                 Processor<Long> processor) {
             // NOOP for APR
Index: java/org/apache/coyote/http11/Http11NioProtocol.java
===================================================================
--- java/org/apache/coyote/http11/Http11NioProtocol.java	(revision 1304962)
+++ java/org/apache/coyote/http11/Http11NioProtocol.java	(working copy)
@@ -20,6 +20,8 @@
 import java.nio.channels.SocketChannel;
 import java.util.Iterator;
 
+import javax.net.ssl.SSLEngine;
+
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
 import org.apache.coyote.http11.upgrade.UpgradeInbound;
@@ -27,11 +29,13 @@
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioEndpoint.Handler;
 import org.apache.tomcat.util.net.SSLImplementation;
 import org.apache.tomcat.util.net.SecureNioChannel;
+import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 
@@ -73,7 +77,14 @@
         return ((NioEndpoint)endpoint);
     }
 
-
+    @Override
+    public void start() throws Exception {
+        super.start();
+        if (npnHandler != null) {
+            npnHandler.init(getEndpoint(), 0, adapter);
+        }
+    }
+    
     // -------------------- Properties--------------------
 
     private Http11ConnectionHandler cHandler;
@@ -201,6 +212,17 @@
             }
         }
 
+        public SocketState process(SocketWrapper<NioChannel> socket,
+                SocketStatus status) {
+            if (proto.npnHandler != null) {
+                SocketState ss = proto.npnHandler.process(socket, status);
+                if (ss != SocketState.OPEN) {
+                    return ss;
+                }
+            }
+            return super.process(socket, status);
+        }
+        
 
         /**
          * Expected to be used by the handler once the processor is no longer
@@ -286,5 +308,12 @@
             return new UpgradeNioProcessor(socket, inbound,
                     ((Http11NioProtocol) getProtocol()).getEndpoint().getSelectorPool());
         }
+
+        @Override
+        public void onCreateSSLEngine(SSLEngine engine) {
+            if (proto.npnHandler != null) {
+                proto.npnHandler.onCreateEngine(engine);
+            }
+        }
     }
 }
Index: java/org/apache/coyote/http11/AbstractHttp11Protocol.java
===================================================================
--- java/org/apache/coyote/http11/AbstractHttp11Protocol.java	(revision 1304962)
+++ java/org/apache/coyote/http11/AbstractHttp11Protocol.java	(working copy)
@@ -183,4 +183,15 @@
     public void setMaxKeepAliveRequests(int mkar) {
         endpoint.setMaxKeepAliveRequests(mkar);
     }
+
+    protected NpnHandler npnHandler;
+    public void setNpnHandler(String impl) {
+        try {
+            Class<?> c = Class.forName(impl);
+            npnHandler = (NpnHandler) c.newInstance();
+        } catch (Exception ex) {
+            getLog().warn("Failed to init light protocol " + impl, ex);
+        }
+    }
+    
 }
Index: java/org/apache/coyote/http11/NpnHandler.java
===================================================================
--- java/org/apache/coyote/http11/NpnHandler.java	(revision 0)
+++ java/org/apache/coyote/http11/NpnHandler.java	(revision 0)
@@ -0,0 +1,43 @@
+/*
+ */
+package org.apache.coyote.http11;
+
+import org.apache.coyote.Adapter;
+import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SocketStatus;
+import org.apache.tomcat.util.net.SocketWrapper;
+
+/**
+ * Interface specific for protocols that negotiate at NPN level, like
+ * SPDY. This is only available for APR, will replace the HTTP framing.
+ */
+public interface NpnHandler {
+    
+    /** 
+     * Check if the socket has negotiated the right NPN and process it.
+     *  
+     * @param socket
+     * @param status
+     * @return OPEN if the socket doesn't have the right npn.
+     *    CLOSE if processing is done. LONG to request read polling.
+     */
+    SocketState process(SocketWrapper<?> socket, SocketStatus status);
+    
+    /**
+     * Initialize the npn handler.
+     * 
+     * @param ep
+     * @param sslContext
+     * @param adapter
+     */
+    public void init(final AbstractEndpoint ep, long sslContext, Adapter adapter);
+
+    /** 
+     * Called when a SSLSocket or SSLEngine are first used, to initialize 
+     * NPN extension.
+     * 
+     * @param socket SSLEngine or SSLSocket
+     */
+    void onCreateEngine(Object socket);
+}
\ No newline at end of file
Index: java/org/apache/coyote/ajp/AjpNioProtocol.java
===================================================================
--- java/org/apache/coyote/ajp/AjpNioProtocol.java	(revision 1304962)
+++ java/org/apache/coyote/ajp/AjpNioProtocol.java	(working copy)
@@ -19,6 +19,8 @@
 import java.nio.channels.SocketChannel;
 import java.util.Iterator;
 
+import javax.net.ssl.SSLEngine;
+
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
@@ -176,5 +178,9 @@
             register(processor);
             return processor;
         }
+
+        @Override
+        public void onCreateSSLEngine(SSLEngine engine) {
+        }
     }
 }
Index: java/org/apache/coyote/ajp/AjpProtocol.java
===================================================================
--- java/org/apache/coyote/ajp/AjpProtocol.java	(revision 1304962)
+++ java/org/apache/coyote/ajp/AjpProtocol.java	(working copy)
@@ -140,5 +140,9 @@
             register(processor);
             return processor;
         }
+
+        @Override
+        public void beforeHandshake(SocketWrapper<Socket> socket) {
+        }
     }
 }
Index: java/org/apache/tomcat/util/net/JIoEndpoint.java
===================================================================
--- java/org/apache/tomcat/util/net/JIoEndpoint.java	(revision 1304962)
+++ java/org/apache/tomcat/util/net/JIoEndpoint.java	(working copy)
@@ -128,6 +128,7 @@
         public SocketState process(SocketWrapper<Socket> socket,
                 SocketStatus status);
         public SSLImplementation getSslImplementation();
+        public void beforeHandshake(SocketWrapper<Socket> socket);
     }
 
 
@@ -289,7 +290,7 @@
             synchronized (socket) {
                 try {
                     SocketState state = SocketState.OPEN;
-
+                    handler.beforeHandshake(socket);
                     try {
                         // SSL handshake
                         serverSocketFactory.handshake(socket.getSocket());
Index: java/org/apache/tomcat/util/net/AprEndpoint.java
===================================================================
--- java/org/apache/tomcat/util/net/AprEndpoint.java	(revision 1304962)
+++ java/org/apache/tomcat/util/net/AprEndpoint.java	(working copy)
@@ -578,6 +578,9 @@
         }
     }
 
+    public long getJniSslContext() {
+        return sslContext;
+    }
 
     /**
      * Start the APR endpoint, creating acceptor, poller and sendfile threads.
Index: java/org/apache/tomcat/util/net/NioEndpoint.java
===================================================================
--- java/org/apache/tomcat/util/net/NioEndpoint.java	(revision 1304962)
+++ java/org/apache/tomcat/util/net/NioEndpoint.java	(working copy)
@@ -702,7 +702,7 @@
         engine.setUseClientMode(false);
         if ( getCiphersArray().length > 0 ) engine.setEnabledCipherSuites(getCiphersArray());
         if ( getSslEnabledProtocolsArray().length > 0 ) engine.setEnabledProtocols(getSslEnabledProtocolsArray());
-
+        handler.onCreateSSLEngine(engine);
         return engine;
     }
 
@@ -1574,6 +1574,7 @@
         public void release(SocketWrapper<NioChannel> socket);
         public void release(SocketChannel socket);
         public SSLImplementation getSslImplementation();
+        public void onCreateSSLEngine(SSLEngine engine);        
     }
 
 
